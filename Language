Program := 		        FunctionList Block '.'
FunctionList :=         NeFunctionList | ε
NeFunctionList :=       FunctionBlock | NeFunctionList FunctionBlock
Function := 		    'function' identifier
FunctionVars := 	    '(' IdentifierList ')'
FunctionBlock :=	    Function FunctionVars 'do' Block '.'
IdentifierList :=       NeIdentifierList  | ε
NeIdentifierList :=     identifier | NeIdentifierList ',' identifier
Block := 		        ConstDecl VarDec ArrDec ProcDecl Statement
ConstDecl :=            'const' ConstAssignmentList ';' | ε
ConstAssignmentList :=  Assignment | ConstAssignmentList ',' Assignment
Assignment :=           identifier ':=' number
VarDecl := 		        'var' IdentifierList ';' | ε
ArrDec :=		        'arr' ArrList ';' | ε
ArrList :=		        Array | ArrList ',' Array
ProcDecl := 		    ProcDecl 'procedure' identifier ';' Block ';' | ε
Statement :=            identifier ':=' Expression
                        | identifier '[' Expression ']' ':=' Expression
                        | 'call' identifier
                        | 'begin' StatementList 'end'
                        | 'if' Condition 'then' Statement '!'
                        | 'if' Condition 'then' Statement 'else' Statement '!'
                        | 'while' Condition 'do' Statement
                        | 'for' identifier ':=' Expression 'to' Expression 'do' Statement
                        | 'break'
                        | 'return' Expression
                        | 'read' '(' identifier ')'
                        | 'write' '(' Expression ')'
                        | 'writeline' '(' Expression ')'
                        | ε
StatementList :=        Statement | StatementList ';' Statement
Condition := 		    'odd' Expression
                        | Expression '=' Expression
                        | Expression '<>' Expression
                        | Expression '<' Expression
                        | Expression '>' Expression
                        | Expression '<=' Expression
                        | Expression '>=' Expression
ExpressionList := 	Expression | ExpressionList ',' Expression | ε
Expression := 		Term | Expression '+' Term | Expression '-' Term
Term := 			Factor | Term '*' Factor | Term '/' Factor | Term '%' Factor
Factor := 		identifier | number | '(' Expression ')' | identifier '[' Expression ']' | FuncCall
Array :=		identifier '[' Expression ']'
FuncCall:=		identifier '(' ExpressionList ')'
